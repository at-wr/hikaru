---
interface Props {
  customTitle?: string;
}

const { customTitle } = Astro.props;
const displayTitle = customTitle || "Alan Ye";
---

<style>
    /* Hide system scrollbar only on desktop (md and up) */
    @media (min-width: 768px) {
        :global(html) {
            scrollbar-width: none; /* Firefox */
            -ms-overflow-style: none; /* Internet Explorer 10+ */
        }
        
        :global(html::-webkit-scrollbar) {
            width: 0;
            background: transparent; /* Chrome/Safari/Webkit */
        }
    }

    /* CSS custom properties for responsive behavior */
    :root {
        --header-bg-opacity: 0;
        --logo-scale: 1;
        --mobile-logo-opacity: 1;
        --logo-weight: 300;
        --logo-width: 100;
    }

    /* Dynamic font weight and width based on scroll and hover */
    .site-logo {
        font-variation-settings: 
            'wght' var(--logo-weight, 300),
            'slnt' 0;
        transition: font-variation-settings 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    /* Desktop header background */
    @media (min-width: 768px) {
        #site-header {
            background-color: rgba(255, 255, 255, var(--header-bg-opacity));
            backdrop-filter: blur(calc(var(--header-bg-opacity) * 8px));
        }
    }

    /* Desktop logo scaling */
    @media (min-width: 768px) {
        #site-logo-desktop {
            transform: scale(var(--logo-scale));
            transition: transform 0.1s ease-out;
        }
    }

    /* Mobile logo opacity */
    @media (max-width: 767px) {
        #site-logo-mobile {
            opacity: var(--mobile-logo-opacity);
            transform: scale(1) !important; /* Always maintain size on mobile */
            transition: opacity 0.1s ease-out;
        }
    }

    /* Desktop mobile logo scaling (when mobile element is shown on desktop) */
    @media (min-width: 768px) {
        #site-logo-mobile {
            transform: scale(var(--logo-scale));
            opacity: 1;
            transition: transform 0.1s ease-out;
        }
    }
</style>

<header class="fixed top-0 left-0 z-50 pointer-events-none transition-all duration-300 ease-out" id="site-header">
    <!-- Desktop: Vertical layout on left-top -->
    <div class="hidden md:block">
        <div class="flex items-start justify-start pl-6 pt-8">
            <a 
                href="/" 
                class="
                    pointer-events-auto
                    block
                    origin-top-left
                    transition-all
                    duration-300
                    ease-out
                    hover:text-slate-600
                    cursor-pointer
                    select-none
                    site-logo
                "
                id="site-logo-desktop"
                style="writing-mode: vertical-rl; text-orientation: mixed;"
            >
                <span class="text-3xl lg:text-4xl font-light text-slate-900">
                    {displayTitle}
                </span>
            </a>
        </div>
    </div>
    
    <!-- Mobile: Horizontal layout on top -->
    <div class="md:hidden w-full px-4 py-3">
        <a 
            href="/" 
            class="
                pointer-events-auto
                block
                transition-all
                duration-300
                ease-out
                hover:text-slate-600
                active:text-slate-700
                cursor-pointer
                select-none
                site-logo
            "
            id="site-logo-mobile"
        >
            <span class="text-lg font-light text-slate-900">
                {displayTitle}
            </span>
        </a>
    </div>
    
    </div>
</header>

<!-- Scroll Indicator -->
<div class="hidden md:block fixed right-8 top-1/2 z-50 pointer-events-none" style="transform: translateY(-50%);">
    <div class="flex flex-col items-center">
        <!-- Progress container -->
        <div class="relative w-0.5 h-20 bg-slate-200 rounded-full overflow-hidden">
            <div 
                class="absolute bottom-0 left-0 w-full bg-slate-700 rounded-full transition-all duration-150 ease-out"
                id="scroll-progress"
                style="height: 0%;"
            ></div>
        </div>
    </div>
</div>

<script>
    // Dynamic header sizing based on scroll
    let lastScrollY = 0;
    let ticking = false;

    function updateHeader() {
        const scrollY = window.scrollY;
        const scrollProgress = document.getElementById('scroll-progress');
        const documentElement = document.documentElement;
        
        // Calculate scale based on scroll position
        const maxScroll = 300;
        const minScale = 0.7;
        const maxScale = 1.0;
        
        const scrollProgress_logo = Math.min(scrollY / maxScroll, 1);
        const scale = maxScale - (scrollProgress_logo * (maxScale - minScale));
        
        // Update CSS custom properties for responsive behavior
        documentElement.style.setProperty('--logo-scale', scale.toString());
        
        // Dynamic font weight - gets heavier as you scroll
        const fontWeight = 300 + (scrollProgress_logo * 200); // 300 to 500
        documentElement.style.setProperty('--logo-weight', fontWeight.toString());
        
        // Mobile opacity calculation
        const mobileOpacity = Math.max(1 - (scrollProgress_logo * 1.2), 0);
        documentElement.style.setProperty('--mobile-logo-opacity', mobileOpacity.toString());
        
        // Header background opacity for desktop
        const headerBgOpacity = scrollY > 50 ? 0.95 : 0;
        documentElement.style.setProperty('--header-bg-opacity', headerBgOpacity.toString());
        
        // Update scroll progress bar
        if (scrollProgress) {
            // Calculate the scroll percentage of the entire page
            const documentHeight = document.documentElement.scrollHeight - window.innerHeight;
            const scrollPercentage = Math.min((scrollY / documentHeight) * 100, 100);
            
            // Update the height of the progress bar
            scrollProgress.style.height = `${scrollPercentage}%`;
            
            // Add subtle glow effect when scrolling
            if (scrollPercentage > 5) {
                scrollProgress.style.boxShadow = '0 0 8px rgba(51, 65, 85, 0.3)';
            } else {
                scrollProgress.style.boxShadow = 'none';
            }
        }
        
        lastScrollY = scrollY;
        ticking = false;
    }

    function handleScroll() {
        const scrollY = window.scrollY;
        const scrollDelta = Math.abs(scrollY - lastScrollY);
        
        // For fast scrolling (large scroll delta), update immediately
        // For normal scrolling, use requestAnimationFrame for smoothness
        if (scrollDelta > 10 || !ticking) {
            if (scrollDelta > 10) {
                // Fast scrolling - update immediately
                updateHeader();
            } else {
                // Normal scrolling - use RAF for smoothness
                if (!ticking) {
                    requestAnimationFrame(updateHeader);
                    ticking = true;
                }
            }
        }
    }

    function initializeHeader() {
        // Listen for scroll events with improved responsiveness
        window.addEventListener('scroll', handleScroll, { passive: true });
        
        // Initial call
        updateHeader();

        // Add smooth hover effects using CSS custom properties
        const logoDesktop = document.getElementById('site-logo-desktop');
        const logoMobile = document.getElementById('site-logo-mobile');
        
        [logoDesktop, logoMobile].forEach(logo => {
            if (logo) {
                logo.addEventListener('mouseenter', () => {
                    // Get current scale from CSS custom property
                    const currentScale = parseFloat(
                        getComputedStyle(document.documentElement)
                            .getPropertyValue('--logo-scale') || '1'
                    );
                    
                    // Apply hover scale using CSS custom property
                    const hoverScale = currentScale * 1.05;
                    document.documentElement.style.setProperty('--logo-scale', hoverScale.toString());
                    
                    // Add width animation on hover - make text wider
                    document.documentElement.style.setProperty('--logo-width', '110');
                });
                
                logo.addEventListener('mouseleave', () => {
                    // Reset to current scroll-based scale
                    updateHeader();
                    
                    // Reset width to normal
                    document.documentElement.style.setProperty('--logo-width', '100');
                });
            }
        });
    }

    // Initialize on DOM ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeHeader);
    } else {
        initializeHeader();
    }

    // Handle page transitions
    document.addEventListener('astro:page-load', () => {
        // Re-initialize after page transitions
        setTimeout(() => {
            initializeHeader();
            // Restore scroll-based header state after transition
            updateHeader();
        }, 100);
    });
</script>
