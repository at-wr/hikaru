---
import HeroSection from "./ui/HeroSection.astro";
import ContentSection from "./ui/ContentSection.astro";
import ProjectCard from "./ui/ProjectCard.astro";
import ExperienceItem from "./ui/ExperienceItem.astro";
import SkillsGroup from "./ui/SkillsGroup.astro";
import ExternalLink from "./ui/ExternalLink.astro";
import PostListItem from "./PostListItem.astro";
import SiteFooter from "./ui/SiteFooter.astro";

import {
    skills,
    experiences,
    projects,
    contactMethods,
    heroContent,
    aboutContent,
    contactContent,
} from "../data/content";

import { getCollection } from "astro:content";

const recentPosts = await getCollection("posts", ({ data }) => {
    return !data.draft;
}).then((posts) =>
    posts
        .sort(
            (a, b) =>
                new Date(b.data.published).getTime() -
                new Date(a.data.published).getTime(),
        )
        .slice(0, 3),
);
---

<div class="min-h-screen bg-white dark:bg-slate-900">
    <HeroSection subtitle={heroContent.subtitle} tagline={heroContent.tagline} />

    
    <main
        id="main-content"
        class="px-8 md:px-16 lg:px-24 pb-24 content-container"
        style="view-transition-name: main-content;"
    >
        <div class="max-w-4xl mx-auto space-y-16 md:space-y-24">
            
            <ContentSection title="About" id="about">
                <div class="space-y-4">
                    {
                        aboutContent.paragraphs.map((paragraph) => (
                            <p class="body-text text-base md:text-lg text-slate-600 leading-relaxed">
                                {paragraph}
                            </p>
                        ))
                    }
                </div>
            </ContentSection>

            
            <div
                class="content-section border-l-2 border-slate-200 pl-6 md:pl-8"
                id="blog"
            >
                <h2
                    class="section-heading text-2xl md:text-3xl lg:text-4xl text-slate-900 mb-4 md:mb-6 tracking-wide"
                >
                    <a
                        href="/archive"
                        class="hover:text-slate-600 transition-colors no-underline inline-block"
                    >
                        Recent Posts
                    </a>
                </h2>
                <div class="space-y-6">
                    {
                        recentPosts.map((post) => (
                            <PostListItem
                                title={post.data.title}
                                description={post.data.description}
                                slug={post.slug}
                                published={post.data.published}
                                size="small"
                            />
                        ))
                    }

                    
            <div class="pt-4">
              <a
                href="/archive"
                class="inline-flex items-center text-slate-900 hover:text-slate-600 transition-colors text-sm"
              >
                View all posts â†’
              </a>
            </div>
                </div>
            </div>

            
            <ContentSection title="Skills" id="skills">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {
                        skills.map((skillGroup) => (
                            <SkillsGroup
                                title={skillGroup.title}
                                skills={skillGroup.skills}
                            />
                        ))
                    }
                </div>
            </ContentSection>

            
            <ContentSection title="Experience" id="experience">
                <div class="space-y-8">
                    {experiences.map((exp) => <ExperienceItem {...exp} />)}
                </div>
            </ContentSection>

            
            <ContentSection title="Projects" id="projects">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {projects.map((project) => <ProjectCard {...project} />)}
                </div>
            </ContentSection>

            
            <ContentSection title="Contact" id="contact">
                <div class="space-y-4">
                    <p
                        class="body-text text-base md:text-lg text-slate-600 leading-relaxed"
                    >
                        {contactContent.description}
                    </p>
                    <div class="flex flex-col sm:flex-row gap-4 flex-wrap">
                        {
                            contactMethods.map((contact) => (
                                <ExternalLink
                                    href={contact.href}
                                    external={contact.external}
                                    id={
                                        contact.label === "Email"
                                            ? "email-link"
                                            : undefined
                                    }
                                    rel={contact.rel || undefined}
                                >
                                    {contact.label}
                                </ExternalLink>
                            ))
                        }
                    </div>
                </div>
            </ContentSection>

            
            <ContentSection title="Extras" id="extras">
                <div class="space-y-4">
                    <p
                        class="body-text text-base md:text-lg text-slate-600 leading-relaxed"
                    >
                        Discover more through these curated connections across
                        the web.
                    </p>
                    <div class="flex flex-col sm:flex-row gap-4 flex-wrap">
                        <ExternalLink href="/friends" external={false}>
                            Friends
                        </ExternalLink>
                        <ExternalLink
                            href="https://www.travellings.cn/plain.html"
                        >
                            Travellings
                        </ExternalLink>
                    </div>
                </div>
            </ContentSection>

            <SiteFooter />
        </div>
    </main>
</div>

<script>
    let ticking = false;
    let cachedElements: {
        element: HTMLElement;
        offsetTop: number;
        height: number;
    }[] = [];
    let windowHeight = window.innerHeight;
    let lastScrollY = 0;

    function cacheElements() {
        const sectionHeadings = document.querySelectorAll(".section-heading");
        cachedElements = Array.from(sectionHeadings).map((heading) => {
            const rect = heading.getBoundingClientRect();
            const offsetTop = rect.top + window.scrollY;
            return {
                element: heading as HTMLElement,
                offsetTop,
                height: rect.height,
            };
        });
        windowHeight = window.innerHeight;
    }

    function updateSectionHeadings() {
        const scrollY = window.scrollY;
        const scrollDelta = Math.abs(scrollY - lastScrollY);
        const viewportCenter = scrollY + windowHeight / 2;
        const maxDistance = windowHeight / 2;

        const isScrollingFast = scrollDelta > 20;

        cachedElements.forEach((item) => {
            const elementCenter = item.offsetTop + item.height / 2;
            const distanceFromCenter = Math.abs(elementCenter - viewportCenter);

            if (isScrollingFast && distanceFromCenter > windowHeight) {
                return;
            }

            const proximityFactor = Math.max(
                0,
                1 - distanceFromCenter / maxDistance,
            );

            const minWeight = 300;
            const maxWeight = 600;
            const fontWeight = Math.round(
                minWeight + proximityFactor * (maxWeight - minWeight),
            );

            const minWidth = 100;
            const maxWidth = 115;
            const fontWidth = Math.round(
                minWidth + proximityFactor * (maxWidth - minWidth),
            );

            const currentWeight = item.element.dataset.currentWeight || "300";
            const currentWidth = item.element.dataset.currentWidth || "100";
            if (
                Math.abs(parseInt(currentWeight) - fontWeight) > 2 ||
                Math.abs(parseInt(currentWidth) - fontWidth) > 1
            ) {
                item.element.style.fontVariationSettings = `'wght' ${fontWeight}, 'wdth' ${fontWidth}, 'slnt' 0`;
                item.element.dataset.currentWeight = fontWeight.toString();
                item.element.dataset.currentWidth = fontWidth.toString();
            }
        });

        lastScrollY = scrollY;
        ticking = false;
    }

    function handleSectionScroll() {
        if (!ticking) {
            const scrollDelta = Math.abs(window.scrollY - lastScrollY);
            if (scrollDelta > 30) {
                updateSectionHeadings();
            } else {
                requestAnimationFrame(updateSectionHeadings);
                ticking = true;
            }
        }
    }

    let resizeTimeout: ReturnType<typeof setTimeout>;
    function handleResize() {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
            cacheElements();
            updateSectionHeadings();
        }, 150);
    }

    function initialize() {
        cacheElements();
        updateSectionHeadings();

        window.addEventListener("scroll", handleSectionScroll, {
            passive: true,
        });
        window.addEventListener("resize", handleResize, { passive: true });
    }

    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", initialize);
    } else {
        initialize();
    }

    document.addEventListener("astro:page-load", () => {
        setTimeout(() => {
            initialize();
        }, 100);
    });

    function setupEmailProtection() {
        const emailLink = document.getElementById("email-link");

        if (emailLink) {
            const user = "hcaer"; // 'reach' reversed
            const domain = "ved.eyrw"; // 'wrye.dev' reversed
            const actualEmail =
                user.split("").reverse().join("") +
                "@" +
                domain.split("").reverse().join("");

            emailLink.addEventListener("click", function (e) {
                e.preventDefault();
                window.location.href = "mailto:" + actualEmail;
            });
        }
    }

    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", setupEmailProtection);
    } else {
        setupEmailProtection();
    }

    document.addEventListener("astro:page-load", () => {
        setTimeout(setupEmailProtection, 100);
    });
</script>

<style>
    @reference "tailwindcss";

    .content-section {
        @apply border-l-2 border-slate-200 dark:border-slate-700 pl-6 md:pl-8;
    }

    .section-heading {
        @apply text-2xl md:text-3xl lg:text-4xl text-slate-900 dark:text-slate-100 mb-4 md:mb-6 tracking-wide;
        font-variation-settings:
            "wght" 300,
            "wdth" 100;
        transition: font-variation-settings 0.1s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .body-text { @apply dark:text-slate-300; }
    .content-section :global(a) { @apply dark:text-slate-100 dark:hover:text-slate-300; }
    #blog :global(.post-item a:focus-visible) {
        text-decoration-thickness: 1.5px !important;
        text-underline-offset: 3px !important;
    }
</style>
